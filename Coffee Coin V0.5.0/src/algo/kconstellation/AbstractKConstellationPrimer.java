package algo.kconstellation;

import static domain.Settings.PRIME_CERTAINTY;

import java.io.IOException;
import java.math.BigInteger;
import java.util.SortedSet;
import java.util.TreeSet;

import util.BigIntegerArrayComparable;

@SuppressWarnings("deprecation")
public abstract class AbstractKConstellationPrimer {
	public static final BigInteger TWO = new BigInteger("2");
	public static final BigInteger FOUR = new BigInteger("4");
	public static final BigInteger SIX = new BigInteger("6");
	public static final BigInteger EIGHT = new BigInteger("8");
	public static final BigInteger TEN = new BigInteger("10");
	public static final BigInteger TWELVE = new BigInteger("12");
	public static final BigInteger FOURTEEN = new BigInteger("14");
	public static final BigInteger SIXTEEN = new BigInteger("16");
	public static final BigInteger EIGHTEEN = new BigInteger("18");
	public static final BigInteger TWENTY = new BigInteger("20");
	public static final BigInteger TWENTYTWO = new BigInteger("22");
	public static final BigInteger TWENTYFOUR = new BigInteger("24");
	public static final BigInteger TWENTYSIX = new BigInteger("26");
	public static final BigInteger TWENTYEIGHT = new BigInteger("28");
	public static final BigInteger THIRTY = new BigInteger("30");
	public static final BigInteger THIRTYTWO = new BigInteger("32");
	public static final BigInteger THIRTYFOUR = new BigInteger("34");
	public static final BigInteger THIRTYSIX = new BigInteger("36");
	public static final BigInteger THIRTYEIGHT = new BigInteger("38");
	public static final BigInteger FOURTY = new BigInteger("40");
	public static final BigInteger FOURTYTWO = new BigInteger("42");
	public static final BigInteger FOURTYFOUR = new BigInteger("44");
	public static final BigInteger FOURTYSIX = new BigInteger("46");
	public static final BigInteger FOURTYEIGHT = new BigInteger("48");
	private final SortedSet<BigInteger[]> allPrimes; 

	public static void main(String[] args) {
		generateSeptaplet();
		generateOctaplet();
		generateNenaplet();
		generateDecaplet();
		generateUndecaplet();
		generateDodecaplet();
		generateTridecaplet();
	}
	
	private static void generateSeptaplet() {
		long[] values = {  11l, 165701l, 1068701l, 11900501l, 15760091l, 18504371l, 21036131l,
				 25658441l, 39431921l, 45002591l, 5639l, 88799l, 284729l, 626609l, 855719l,
				 1146779l, 6560999l, 7540439l, 8573429l, 17843459l } ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new SeptapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("7-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateOctaplet() {
		long[] values = { 11l, 15760091l, 25658441l, 93625991l, 182403491l,
				 226449521l, 661972301l, 910935911,
				 17l, 1277l, 113147l, 2580647l, 20737877l,
				 58208387l, 73373537l, 76170527l, 100658627l, 134764997l,
				 137943347l, 165531257l, 171958667l, 224008217l, 252277007l,
				 294536147l, 309740987l, 311725847l, 364154027l, 408936947l,
				 515447747l, 521481197l, 528272177l, 619010297l, 626927447l,
				 682809977l, 701679047l, 989043047l,
				 88793l, 284723l, 855713l, 1146773l, 6560993l,
				 69156533l, 74266253l, 218033723l, 261672773l, 302542763l,
				 964669613l } ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new OctapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("8-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateNenaplet() {
		long[] values = { 13l, 113143l, 626927443l, 2335215973l, 3447123283l,
				 4086982633l, 4422726013l, 6318867403l, 7093284043l, 8541306853l,
				 10998082213l, 14005112893l, 18869466373l, 21528117883l, 21843411823l,
				 28156779793l, 30303283243l, 31194463033l, 33081664153l, 35004115033l, 
				 35193551203l, 35193551203l, 39682755793l, 41666557393l, 47064359803l,
				 47798406193l, 49533488083l, 51435506383l, 52719078673l, 57366516913l,
				 59038943053l, 59780979103l, 62564104063l, 75832757233l, 79963083433l,
				 83122625473l, 93138486583l, 93789236683l, 96259498873l, 97966866703l,
				 99409572523l, 103050287293l, 103798521703l, 104751695743l, 106211658583l, 
				 107961509413l, 109055504263l, 114829973953l, 115316796583l, 118423267423l,
				 118934479663l, 122015998183l, 124684085413l, 131971411123l, 135936506593l,
				 137064385303l, 140163144673l, 142641528763l, 143449458613l, 151411248403l,
				 154176423673l, 157797433873l, 158114143063l, 163680506593l, 168478035613l,
				 175029719713l, 175956805873l, 176615006983l, 177083148013l, 179822268163l,
				 180386310733l, 188652262213l, 189540653983l, 194666570713l, 197176517953l, 
				 198871424023l, 201622282633l, 201686318833l, 202500011713l, 203626335373l,
				 205750546273l, 209853250543l, 217636995463l, 218018750683l, 222030503323l,
				 224372900023l, 233121174043l, 233691050683l, 236345972893l,
				 88789l, 855709l, 74266249l, 964669609l, 1422475909l,
				 2117861719l, 2558211559l, 2873599429l, 5766036949l, 6568530949l, 
				 8076004609l, 9853497739l, 16394542249l, 21171795079l, 21956291869l,
				 22741837819l, 26486447149l, 27254489389l, 36955907689l, 37045175329l,
				 39745733539l, 71369039869l, 75884569279l, 87554295529l, 88431318949l,
				 108039383509l, 120739615669l, 123878599699l, 141741265639l, 146163774919l,
				 164444511589l, 177313452289l, 179590045489l, 181523196289l, 185222773639l,
				 187996202479l, 188506859059l, 193993844899l, 194000607319l, 196253905009l,
				 199998949669l, 216887683069l, 217999764109l, 219795770629l, 231255798859l, 
				 242360943259l, 260222396869l, 267204456499l, 292624431079l, 293320920019l, 
				 303023883289l, 330293107579l, 341741739319l, 355111401499l, 360744936679l, 
				 385736835919l, 413801829799l, 437984753179l, 448301185459l, 463152187009l, 
				 465328692529l, 478863103699l, 489963274039l, 533840361139l, 557552371279l, 
				 609587549089l, 614414530969l, 618697706299l, 619833080539l, 627929073829l, 
				 642152975899l, 662883608899l, 666413245009l, 672422947099l, 696391309699l, 
				 709116660379l, 716726260489l, 725483102779l, 740312270209l, 782422789849l, 
				 11l, 182403491l, 226449521l, 910935911l, 1042090781l,
				 1459270271l, 2843348351l, 6394117181l, 6765896981l, 8247812381l,
				 8750853101l, 11076719651l, 12850665671l, 17140322651l, 22784826131l,
				 24816950771l, 33081664151l, 41614070411l, 43298074271l, 43813839521l, 
				 53001578081l, 54270148391l, 57440594201l, 64202502431l, 66449431661l, 
				 80587471031l, 83122625471l, 84882447101l, 93288681371l, 98257943081l, 
				 101698684931l, 117762315941l, 121317512201l, 139017478331l, 148323246341l, 
				 165952761041l, 169349651741l, 173405293331l, 180237252311l, 185814366581l, 
				 187735172741l, 201708760061l, 203499800501l, 231965242121l, 232942479221l, 
				 238333854371l, 250319013011l, 260208736631l, 276512899961l, 294757438511l, 
				 294920291201l, 297532090391l, 311094184391l, 312962494961l, 319751660141l, 
				 356380654361l, 362110374161l, 383960791211l, 447073236341l, 458958087431l, 
				 467061716111l, 480327521741l, 486294251741l, 490609410281l,
				 17l, 1277l, 113147l, 252277007l, 408936947l, 
				 521481197l, 1116452627l, 1209950867l, 1645175087l, 2966003057l,
				 3947480417l, 6234613727l, 9307040837l, 9853497737l, 11878692167l,
				 13766391467l, 21956291867l, 22741837817l, 24388061207l, 24718113437l, 
				 28498194707l, 29177275067l, 31201358387l, 32417170127l, 36230354177l, 
				 42052236197l, 51435506387l, 54202818407l, 58797275477l, 65366478887l, 
				 67406579477l, 71999669297l, 78270669767l, 78271296197l, 80187554327l, 
				 83026673747l, 83115690167l, 94968471107l, 98793034577l, 99409572527l, 
				 103798521707l, 105035735657l, 107735906477l, 110559120797l, 115154953997l, 
				 119187533807l, 121801892477l, 127788668717l, 130714028567l, 133021481687l, 
				 138733641017l, 143977593497l, 144011113217l, 149414528357l, 150684085817l, 
				 153039812897l, 158532152477l, 164444511587l, 168478035617l, 172660174847l, 
				 179142250577l, 179590045487l, 180566297267l, 181503415127l, 183562654127l, 
				 185242953017l, 187505538587l, 193378900697l, 197335238117l, 205137898307l, 
				 209853250547l, 209926512767l, 211298118587l, 213243428597l, 213252021107l, 
				 216741880697l, 217999764107l, 224745399077l, 227520127817l, 231255798857l, 
				 242360943257l, 249269868557l } ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new NenapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("9-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateDecaplet() {
		long[] values = {11l,   33081664151l,   83122625471l,  294920291201l,  573459229151l, 
			     663903555851l,  688697679401l,  730121110331l, 1044815397161l, 1089869189021l,
			     1108671297731l, 1235039237891l, 1291458592421l, 1738278660731l, 1761428046221l,
			     1769102630411l, 1804037746781l, 1944541048181l, 2135766611591l, 2177961410741l,
			     2206701370871l, 2395426439291l, 2472430065221l, 2601621164951l, 2690705555381l,
			     2744825921681l, 2745579799421l, 2772177619481l, 2902036214921l, 3132826508081l,
			     3447850801511l, 3640652828621l, 3692145722801l, 4136896626671l, 4360784021591l,
			     4563595602101l, 4582294051871l, 4700094892301l, 5289415841441l, 5308007072981l,
			     5351833972601l, 5731733114951l, 5912642968691l, 5923626073901l, 6218504101541l,
			     7353767766461l, 7535450701391l, 7559909355611l, 7908189600581l, 9062538296081l,
			     9494258167391l, 9898228819091l, 9853497737l,   21956291867l,   22741837817l,  
			     164444511587l,  179590045487l, 217999764107l,  231255798857l,  242360943257l,
			     666413245007l,  696391309697l,
			     867132039857l,  974275568237l,  976136848847l, 1002263588297l, 1086344116367l,
			    1403337211247l, 1418575498577l, 2118274828907l, 2202874566017l, 2385504217067l,
			    2524133138687l, 2935239433097l, 3019265734337l, 3481009682387l, 3692468438357l,
			    3699811791647l, 4074379299227l, 4258482896177l, 4396774576277l, 5111078123507l,
			    5248370051777l, 5603394155057l, 5658223464977l, 6302879942057l, 6353090848187l,
			    6368171154197l, 6390526086797l, 6953798916917l, 6986122067777l, 7117924769927l,
			    7327435302347l, 7624513711247l, 7679352605357l, 8310209124377l, 8639103445097l,
			    9378647660507l, 9407507858447l, 9479280868217l, 9506905472147l, 9611678132027l} ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new DecapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("10-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateUndecaplet() {
		long[] values = { 11l,     1418575498573l,   2118274828903l,   4396774576273l,   6368171154193l,   6953798916913l,
			     27899359258003l,  28138953913303l,  34460918582323l,  40362095929003l,  42023308245613l,
			     44058461657443l,  61062361183903l,  76075560855373l,  80114623697803l,  84510447435493l,
			     85160397055813l,  90589658803723l,  90793299817453l, 147119918235523l, 156393789335863l,
			    170185081150933l, 173469325674493l, 176053639140073l, 186460616596333l, 186938838927073l,
			    195647411389663l, 199133130576613l, 204757718740423l, 218021188549243l, 234280497145543l,
			    249826857614413l, 282854319391723l, 292186774388203l, 297416007172363l, 317696609400403l,
			    345120905374093l, 346117552180633l, 352270406993353l, 392842699733563l, 413564145244483l, 
				7908189600581l,  10527733922591l,  12640876669691l,  38545620633251l,
			     43564522846961l,  60268613366231l,  60596839933361l,  71431649320301l,  79405799458871l,
			    109319665100531l, 153467532929981l, 171316998238271l, 216585060731771l, 254583955361621l,
			    259685796605351l, 268349524548221l, 290857309443971l, 295606138063121l, 380284918609481l,
			    437163765888581l, 440801576660561l, 487925557660811l } ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new UndecapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("11-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateDodecaplet() {
		long[] values = {11l, 1418575498567l,    27899359257997l,    34460918582317l,    76075560855367l,   186460616596327l,
			      218021188549237l,   234280497145537l,   282854319391717l,   345120905374087l,   346117552180627l,
			      604439135284057l,   727417501795057l,  1041814617748747l,  1090754719898917l,  1539765965257747l, 
			     3152045700948217l,  3323127757029307l,  3449427485143867l,  4422879865247917l,  4525595253333997l,
			     4730773080017827l,  5462875671033007l,  6147764065076707l,  6205707895751437l,  6308411019731047l,
			     7582919852522857l,  7791180222409657l,  9162887985581557l,  9305359177794907l, 10096106139749857l,
			    10349085616714687l, 10744789916260627l, 10932016019429347l, 11140102475962687l, 12448240792011097l,
			    14727257011031407l, 16892267700442207l, 17963729763800047l, 18908121647739397l, 19028992697498857l,
			    19756696515786457l, 20252223877980937l, 20429666791949257l, 21680774776901467l, 21682173462980257l,
			    23076668788453507l, 24036602580170407l, 24101684579532787l, 25053289894907347l, 25309078073142937l,
			    25662701041982077l, 25777719656829367l, 26056424604564427l, 26315911419972247l, 26866456999592437l,
			    26887571851660747l, 27303559129791787l, 27839080743588187l, 28595465291933767l, 29137316070747727l,
			    30824439453812077l, 31395828815154877l, 31979851757518507l, 32897714831936797l, 33850998835087507l, 
			    36147660266252377l, 37072866353096647l, 37141494251796007l, 37489481237373007l, 38006810209768627l, 
			    38748333093144517l, 38994703724306557l, 39797843204594317l,    
				380284918609481l,   437163765888581l,   701889794782061l,   980125031081081l,
			     1277156391416021l,  1487854607298791l,  1833994713165731l,  2115067287743141l,  2325810733931801l,
			     3056805353932061l,  3252606350489381l,  3360877662097841l,  3501482688249431l,  3595802556731501l,
			     3843547642594391l,  5000014653723821l,  5861268883004651l,  7486645325734691l,  7933248530182091l,
			     8760935349271991l,  8816939536219931l,  8871465225933041l,  9354490866900911l, 13764730155211151l,
			    13884748604026031l, 17438667992681051l, 20362378935668501l, 20471700514990841l, 20475715985020181l,
			    20614750499829371l, 21465425387541251l, 21628360938574121l, 21817283854511261l, 22238558064758921l,
			    22318056296221571l, 22733842556089781l, 22849881428489231l, 23382987892499351l, 23417442472403711l,
			    25964083184094941l, 26515897161980111l, 29512383574028471l, 30074756036270831l, 30310618347929651l,
			    30402250951007051l, 30413977411117031l, 33502273017038711l, 33508988966488151l, 33976718302847051l,
			    34783522781262371l, 37564605737538611l, 37606024583356961l, 39138758504100371l, 40205947750578341l,
			    40257009922154141l, 40392614725338761l, 40504121267225501l, 41099072498143391l, 41289201480321911l,
			    41543933848913381l, 42218492028808211l, 43938526447515431l, 45577046471292221l, 46428559244382431l,
			    47009705561193491l, 47493758956860101l, 48897378456286091l, 49242777550551701l, 49600456951571411l,
			    49600456951571411l, 49719485618652581l, 50155365997396391l, 50428186330336931l, 51553155978279071l,
			    52018707666681641l, 57145775215328531l, 57853108424841461l, 60087392674669091l, 60639922253220041l,
			    60948080389385921l, 61187849081864621l, 62958926374779551l  } ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new DodecapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("12-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private static void generateTridecaplet() {
		long[] values = { 11l, 13l, 186460616596321l, 7582919852522851l,31979851757518501l, 
			     49357906247864281l,  79287805466244211l,  85276506263432551l, 
			     89309633704415191l,  89374633724310001l,  98147762882334001l, 
			    136667406812471371l, 137803293675931951l, 152004604862224951l,
			    157168285586497021l, 159054409963103491l, 191495873018073691l, 
			    210509800417460611l, 301056055256880991l, 379374319296406501l, 
			    388218745698928981l, 389259253111633741l, 4289907938811613l,   
				5693002600430263l,  1707898733581273l,   3266590043460823l, 
				4422879865247923l, 7933248530182091l,  20475715985020181l, 
			     21817283854511263l,  48290946353555023l,  51165618791484133l,
			     53094081535451893l,  70219878257874463l,  98633358468021313l,
			     99142644093930373l, 104814760374339133l, 166784569423739203l, 
			    167841416726358493l, 184601252515266523l, 263331429949004353l, 
			    272039012072134243l, 339094624362619243l, 363319822006646623l, 
			    363760043662280383l, 437335541550793003l, 455289126169953193l, 
			     10907318641689703l,  32472302129057023l,  52590359764282573l,
			     60229684381540753l,  67893346321234513l,  93179596929433093l, 
			    115458868925574253l, 140563537593599353l, 142977538681261363l,
			    148877505784397623l, 166362638531783773l, 232442516762530153l,  
			    236585787518684683l, 255933372890105143l, 317294052871840123l,
			    325853825645632363l, 337188071215909993l, 344447962857168403l, 
			     21817283854511261l,  33502273017038711l,  40257009922154141l,
			     49242777550551701l,  49600456951571411l,  75093141517810301l,
			     84653373093824651l, 119308586807395871l, 129037438367672951l,  
			    129706953139869221l, 151242381725881331l, 158947009165390331l,
			    161216594737343261l, 167317340088093311l, 176587730173540571l,
			    178444395317213141l, 197053322268438521l, 301854920123441801l, 
				7697168877290909l,  10071192314217869l,  11987120084474369l,   
			     28561589689237439l,  62321320746357689l,  73698766709402669l,
			     75046774774314359l,  79287805466244209l,  98551408299919409l,
			    136720189890477209l, 225735856757596019l, 234065221633327919l,
			    302834818301440259l, 360345440708336099l, 385443070970192069l,
			    387494664213890249l, 466256026285842809l, 539043082132918379l,
			    570108181108560929l, 610147978081735109l, 533306698691196149l,
				10527733922579l,  15991086371740199l,  22443709342850669l,   
			     69759046409087909l,  94415460183744419l, 164873121596539229l,
			    197053322268438509l, 212971209388223159l, 215768926871613989l,
			    248170682800139819l, 270109976153617319l, 326374793491266239l,
			    341896216415143109l, 341987213500572359l, 362035072661912369l,  
			    401062754451879239l, 441180406661470349l, 450928996714672349l,
			    503035098004929209l} ;
		
		for (long value: values) {
			try {
				AbstractKConstellationPrimer primer = new TridecapletConstellation();
				primer.getNextKPrime(new BigInteger(Long.toString(new Long(value-2))));
				System.out.println("13-prime in this set starts with " + primer.getHighestKPrime()[0]);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	public AbstractKConstellationPrimer() {
		allPrimes = new TreeSet<BigInteger[]>(new BigIntegerArrayComparable());
	}
	
	public BigInteger[] getNextKPrime() {
		BigInteger[] minimum = getHighestKPrime();
		try {
			return getNextKPrime(minimum[0]);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	public BigInteger[] getHighestKPrime() {
		if (allPrimes.isEmpty()) {
			return null;
		}
		return allPrimes.last();
	}
	
	public BigInteger[][] getAllKnownPrimes() {
		if (allPrimes.isEmpty() ) {
			return null;
		}
		BigInteger[][] result = new BigInteger[allPrimes.size()][allPrimes.first().length];
		return allPrimes.toArray(result);
	}
	
	public boolean isKPrime(BigInteger[] primes) {
		for (BigInteger testInt: primes) {
			if (!testInt.isProbablePrime(PRIME_CERTAINTY)) {
				return false;
			}
		}
		return true;
	}
	
	@Override
	public String toString() {
		if (allPrimes.size() == 0) {
			return super.toString(); 
		}
		StringBuilder result = new StringBuilder();
		result.append("Value of k: " + allPrimes.first().length + "\n");
		for (BigInteger[] kElement: allPrimes) {
			result.append("(");
			for (BigInteger element: kElement) {
				result.append(element + ",");
			}
			result.deleteCharAt(result.length()-1);
			result.append(")\n");
		}
		return new String(result);
	}
	
	protected boolean addPrime(BigInteger[] primeArray) {
		// Check whether the array is indeed new
		for (BigInteger[] big: allPrimes) {
			if (big[0].equals(primeArray[0])) {
				return false;
			}
		}
		return allPrimes.add(primeArray);
	}
	
	public int size() {
		return allPrimes.size();
	}
	
	public abstract BigInteger[] getNextKPrime(BigInteger minimum) throws IOException; // Give an array of primes at minimum distance of each other,
																						// with the smallest one larger than the parameter



}
